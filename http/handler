#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper::Concise;
use HTTP::Headers;
use HTTP::Response;
use HTTP::Date;
use Template;
use Map;
use Cwd qw( getcwd );


my $mime = {
  html => 'text/html; charset=utf8',
  txt  => 'text/plain; charset=utf8',
  svg  => 'image/svg+xml',
  png  => 'image/png',
  js   => 'application/javascript',
  css  => 'text/css',
};

my @status = ( 200 => 'OK' );

my $req = shift @ARGV;
my $doc = $req->uri->path;
if ($doc eq '/') { $doc = 'index.html'; }
$doc =~ s/\.{2,}/\./g;
$doc =~ s/^[\/\.]+//g;
unless (-e 'http/'.$doc) { 
  $doc = 'error_404.html'; 
  @status = ( 404 => 'Not found' );
}

my $content = '';
my $header = HTTP::Headers->new(
  Date		=> time2str(time),
  Connection	=> 'keep-alive',
);

# Check authorization
warn "$0 $$ session = $self\n";
unless ($self->auth_check($req)) {
  @status = (401 => 'Unauthorized');
  $doc = 'error_401.html';
  $header->header($self->auth_challenge());
} 

my $tt = {
  INCLUDE_PATH	=> 'http',
  INTERPOLATE	=> 1,
  POST_CHOMP	=> 0,
  PRE_PROCESS	=> '',
  EVAL_PERL	=> 1,
};
my $template = Template->new($tt);
my $vars = {
  req		=> $req,
  map		=> Map->new( session => $self ),
};

my $ext = (split(/\./, $doc))[-1];
#warn "$0 $$ serve $doc (ext=$ext)\n";
if ($ext eq 'html' || $ext eq 'svg') {
  #warn "$0 $$ use template\n";
  $header->header( Cache_Control	=> 'no-cache, no-store, must-revalidate' );
  unless ($template->process($doc, $vars, \$content, binmode => ':utf8')) {
    @status = ( 500 => 'Server error' );
    $doc = 'error_500.html';
    my $error = $template->error();
    warn "$0 $$ Template: $error\n";
    $vars->{'error'} = $error;
    $template->process('error_500.html', $vars, \$content, binmode => ':utf8');
  }
} else {
  #warn "$0 $$ binary xfer\n";
  $header->header( Cache_Control	=> 'public, max-age=86400' );
  $content = $self->read_file('http/'.$doc);
}
$header->header( Content_Length => length($content) );
$header->header( Content_Type => $mime->{$ext} );
my $res = HTTP::Response->new( @status, $header, $content );
print 'HTTP/1.1 '.$res->as_string;
if ($status[0] != 200) {
  print STDERR "$0 $$ ".$req->uri." ".join(' ',@status)."\n";
}

exit;

 
 
