#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper::Concise;
use HTTP::Headers;
use HTTP::Response;
use HTTP::Date;
use URI;
use URI::QueryParam;
use Template;
use Map;
use Cwd qw( getcwd );
use XML::Simple;

# NOTE: In this context, $self is a Session::Async object
my $socket = $self->{'socket'};

my $mime = {
  html => 'text/html; charset=utf8',
  ajax => 'text/plain; charset=utf8',
  txt  => 'text/plain; charset=utf8',
  svg  => 'image/svg+xml',
  png  => 'image/png',
  js   => 'application/javascript',
  css  => 'text/css',
};


my @status = ( 200 => 'OK' );
my $req = shift @ARGV;
my $doc = $req->uri->path;
if ($doc eq '/') { $doc = 'index.html'; }
$doc =~ s/\.{2,}/\./g;
$doc =~ s/^[\/\.]+//g;
my ($surname, $ext) = (split(/\./, $doc));

# Check file (except ajax and xml requests, which are not files)
unless ($ext eq 'ajax' || $ext eq 'xml') {
  # Verify that file exists
  unless (-e 'http/'.$doc) { 
    $doc = 'error_404.html'; 
    @status = ( 404 => 'Not found' );
  }
  # Verify that file is world readable
  my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat('http/'.$doc);
  unless ($mode & 0004) { 
    warn "$0 $$ $doc mode=$mode\n";
    $doc = 'error_403.html'; 
    @status = ( 403 => 'Forbidden' );
  }
}

my $content = ''; # Whatever we end up serving will go here
my $header = HTTP::Headers->new(
  Date		=> time2str(time),
  Connection	=> 'keep-alive', 
  # We should probably check the request headers before setting connection:keep-alive 
  # BUT we have no easy way to signal connection:close yet because 'handler' only has 
  # a TCP connection to the a5 core, and the client has a non-blocking socket so
  # that socket can't be closed until the output buffer has been flushed. Hmm.
);

# Check authorization 
#warn "$0 $$ session = $self\n";
my $result = $self->auth_check($req); # 1 ok, 0 missing, -1 failed
if ($result == -1) {
  # Invalid/rejected credentials
  #warn "INVALID/REJECTED credentials, removing authorization header\n";
  $req->headers->remove_header('authorization'); 
}
unless ($result == 1) {
  @status = (401 => 'Unauthorized');
  $doc = 'error_401.html';
  $header->header($self->auth_challenge($req));
} 

# Template::Toolkit parameter settings
my $tt = {
  INCLUDE_PATH	=> 'http',
  INTERPOLATE	=> 1,
  POST_CHOMP	=> 0,
  PRE_PROCESS	=> '',
  EVAL_PERL	=> 1,
};
my $template = Template->new($tt);

# Map object interface
my $map = Map->new( req => $req, session => $self );

# The following vars will be available to Template::Toolkit
my $vars = {
  map		=> $map,
};

#warn "$0 $$ serve $doc (ext=$ext)\n";
if ($ext eq 'html' || $ext eq 'svg') {
  # Process and serve a template
  #warn "$0 $$ use template\n";
  $header->header( Cache_Control	=> 'no-cache, no-store, must-revalidate' );
  unless ($template->process($doc, $vars, \$content, binmode => ':utf8')) {
    @status = ( 500 => 'Server error' );
    $doc = 'error_500.html';
    my $error = $template->error();
    warn "$0 $$ Template: $error\n";
    $vars->{'error'} = $error;
    $template->process('error_500.html', $vars, \$content, binmode => ':utf8');
  }
} elsif ($ext eq 'ajax') {
  # Serve AJAX request as a virtual document
  $header->header( Cache_Control        => 'no-cache, no-store, must-revalidate' );
  $content = 'WARNING! Unhandled request: '.Dumper($req);

  my $uri = URI->new('?'.$req->content, 'http'); # We can now use URI::QueryParam methods on $uri

  if ($doc eq 'move.ajax' && $uri->query_param('id') && $uri->query_param('id') =~ /^([a-z]+)([0-9]+)$/) {
    my ($type, $id) = ($1, $2);
    my $relx = int($uri->query_param('relx') * 1);
    my $rely = int($uri->query_param('rely') * 1);
    $content = $map->move($type, $id, $relx, $rely );
  }
  
} elsif ($ext eq 'xml') {
  # Serve XML request as a virtual object by looking up the $map object with parameter 'id' 
  # e.g. host_by_id.xml?id=123 --> $map->host_by_id(123) --> XML::Simple
  # WARNING! Map.pm may contain dangerous methods, be careful!
  die if $surname eq 'new'; # Danger
  die if $surname eq 'query'; # Danger
   
  my $xs = XML::Simple->new( AttrIndent => 1, KeepRoot => 1, SuppressEmpty => undef, NoAttr => 1 );
  my $data = $map->$surname($req->uri->query_param('id'));
  if (ref($data) eq 'ARRAY') {
    # Multiple objects
    $content = $xs->XMLout( { $surname => { 'object' => $data } } ); 
  } else {
    # Single object
    $content = $xs->XMLout( { $surname => $data } ); 
  }
} else {
  # Serve static file (JS, CSS, bitmap etc.)
  #warn "$0 $$ binary xfer\n";
  $header->header( Cache_Control	=> 'public, max-age=86400' );
  $content = $self->read_file('http/'.$doc);
}

# Finalize headers and send the response back to a5 via the STDOUT pipe
$header->header( Content_Length => length($content) );
$header->header( Content_Type => $mime->{$ext} );
my $res = HTTP::Response->new( @status, $header, $content );
print 'HTTP/1.1 '.$res->as_string;

# Log message to the console for now
if ($status[0] != 200 && $status[0] != 401) {
  print STDERR "$0 $$ Map.pm: ".$req->uri." ".join(' ',@status)."\n";
}
#print STDERR "$0 $$ request=".Dumper($req);
exit;

 
 
