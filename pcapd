#!/usr/bin/perl

# NOTE! This script is designed to be executed within Atlas V only!

# Listen for network traffic and report live hosts back to the main process

use strict;
use warnings;
use Net::Pcap;
use Data::Dumper;
use NetAddr::IP::Util qw( inet_ntoa );
use Time::HiRes;
use JSON;

my $TTL = 60;
my $address = {};
my $json = JSON->new();
warn "$0 $$ running\n";
while (1) {
  # Get device
  my $err = '';
  print "# ".pcap_lib_version()."\n";
  my $dev = shift @ARGV || pcap_lookupdev(\$err);  # find a device
  my $snaplen = shift @ARGV || 56;
  if ($err) { die "! pcap error looking up device: ".$err."\n"; }
  print "# device: ".$dev."\n";
  print "# size: ".$snaplen."\n";

  # Open the device for live packet capturing
  my $pcap = pcap_open_live($dev, $snaplen, 0, 0, \$err);
  if ($err) { die "! pcap error opening device ".$dev.": ".$err."\n"; }
  print "# link type: ".pcap_datalink_val_to_description(pcap_datalink($pcap))."\n";

  # Capture packets in non-promiscuous mode and call process_packet() for each one
  pcap_loop($pcap, 0, \&process_packet, '');

  # That should loop indefinitely so something must have gone wrong
  my $errno = pcap_geterr($pcap);
  if ($err) {
    die "! pcap error ".$errno.": ".pcap_strerror($errno)."\n";
  }
  
  # Close the device
  pcap_close($pcap);
  sleep 1;
}

sub process_packet {
  my ($user_data, $header, $packet) = @_;
  
  # Examine packet header
  #my $dst_mac = unpack("H*", substr($packet, 0, 6));
  #my $src_mac = unpack("H*", substr($packet, 6, 6));
  my $eth_type = unpack("n", substr($packet, 12, 2));
  if ($eth_type == 0x0800) {
    # Payload is an IP packet
    my $payload = substr($packet, 14);
    my $src_ip = inet_ntoa(substr($payload, 12, 4));
    #warn "$0 $$ packet from $src_ip\n";
    #my $dst_ip = inet_ntoa(substr($payload, 16, 4));
    #print "$src_ip > $dst_ip\n";
    $src_ip = is_valid($src_ip) ? $src_ip : '';
    #$dst_ip = is_valid($dst_ip) ? $dst_ip : '';

    my $now = time;
    unless ($src_ip eq '' || ($address->{$src_ip} && $address->{$src_ip} + $TTL > $now)) {
      #warn "$0 $$ db update ip=$src_ip\n";
      print $session "UPDATE hosts SET up=1, alive=NOW() WHERE ip='".$src_ip."'\n";
      query_result($session);
      #warn "$0 $$ alive\n";
      $address->{$src_ip} = $now;
    } else {
      #warn "$0 $$ NO DB UPDATE (".$address->{$src_ip}.")\n";
    }
    #print hexdump($packet);    
  }
}

#sub hexdump { 
#  my $pkt = shift;
#  my @lines = ();
#  while ($pkt) {
#    my $line = substr($pkt, 0, 16);
#    my $hex = unpack("H*", $line);
#    $hex =~ s/(..)/$1 /sg;
#    push @lines,  "# ".$hex."\n";
#    $pkt = substr($pkt, (length($pkt) < 16 ? length($pkt) : 16) );
#  }
#  return @lines;
#}

sub is_valid {
  my $ip = shift;
  return 0 if $ip eq '0.0.0.0';
  return 0 if $ip eq '127.0.0.1';
  return 0 if $ip eq '255.255.255.255';
  return 1;
}

sub query_result {
  my $session = shift;
  my $cols = [];
  my @records = ();
  #warn "$0 $$ query_result() begin\n";
  while (my $line = <$session>) {
    chomp $line;
    #warn "$0 $$ query_result() got [$line]\n";
    last unless $line; # Empty line = end of response
    next if $line =~ /^#/; # Comment/message
    if ($line =~ /^\!/) {
      # Error
      #warn "$0 $$ $line\n";
      last;
    }
    #warn "$0 $$ decode line=".$line."\n";
    if ($line =~ /^\@(.+)/) { $cols = $json->decode($1); next; }
    my $row = $json->decode($line);
    my %hash = ();
    @hash{@{$cols}} = @{$row}; 
    push @records, \%hash;
    #warn "$0 $$ hash=".Dumper(\%hash);
  } 
  return @records;
}
